// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //uid           Int       @id @default(autoincrement())
  id            String    @id @default(cuid())
  image         String
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]
  createdPosts  Post[]    @relation("Post_createdPosts")
  likedPosts    Post[]    @relation("Post_likedPosts")
}

model Post {
  id                  Int      @id @default(autoincrement())
  txt                 String // 생성 문장
  star                Int // 좋아요
  cards               Card[] // Card 배열
  time                DateTime
  createdBy           String
  User_Post_createdBy User     @relation("Post_createdPosts", fields: [createdBy], references: [id])
  likedBy             String
  User_Post_likedBy   User     @relation("Post_likedPosts", fields: [likedBy], references: [id])
}

model Card {
  cID       Int      @id @default(autoincrement())
  url       String // image URL 
  desc      String
  post      Post?    @relation(fields: [postPid], references: [id], onDelete: Cascade)
  postPid   Int?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?
}

// model Session {
// sessionID Int    @id @default(autoincrement())
//   turnNo Int
//   isPlaying Boolean
//   cards Card[]
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  turnNo       Int?
  cards        Card[]
  isPlaying    Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
